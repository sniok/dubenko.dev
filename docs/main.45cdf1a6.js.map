{"version":3,"sources":["redWaves.glsl","waves.glsl","webgl.js","main.js"],"names":["module","exports","shaders","redWaves","waves","vertices","Float32Array","scene","width","height","canvas","document","getElementById","gl","getContext","viewport","clearColor","clear","COLOR_BUFFER_BIT","vertex","fragment","Math","floor","random","length","vs","createShader","VERTEX_SHADER","shaderSource","compileShader","fs","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","vbuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","useProgram","getShaderParameter","COMPILE_STATUS","console","log","getShaderInfoLog","getProgramParameter","LINK_STATUS","getProgramInfoLog","uColor","getUniformLocation","uniform1f","aVertexPosition","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","FLOAT","time","loop","drawArrays","TRIANGLES","setTimeout"],"mappings":";AAAAA,OAAOC,QAAQ;;ACAfD,OAAOC,QAAQ;;AC0EX,aA1EJ,IAAA,EAAA,EAAA,QAAA,oBACA,EAAA,EAAA,QAAA,iBAyEI,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAvEJ,IAAMC,EAAU,CAACC,EAAD,QAAWC,EAAX,SAEVC,EAAW,IAAIC,aAAa,EAAE,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,IAEpEC,EAAQ,CACZC,MAAO,IACPC,OAAQ,KAGJC,EAASC,SAASC,eAAe,UACjCC,EAAKH,EAAOI,WAAW,SAC7BJ,EAAOF,MAAQD,EAAMC,MACrBE,EAAOD,OAASF,EAAME,OAEtBI,EAAGE,SAAS,EAAG,EAAGL,EAAOF,MAAOE,EAAOD,QACvCI,EAAGG,WAAW,EAAG,EAAG,EAAG,GACvBH,EAAGI,MAAMJ,EAAGK,kBAEZ,IAAMC,EAAN,0GAOMC,EAAWlB,EAAQmB,KAAKC,MAAMD,KAAKE,SAAWrB,EAAQsB,SAEtDC,EAAKZ,EAAGa,aAAab,EAAGc,eAC9Bd,EAAGe,aAAaH,EAAIN,GACpBN,EAAGgB,cAAcJ,GAEjB,IAAMK,EAAKjB,EAAGa,aAAab,EAAGkB,iBAC9BlB,EAAGe,aAAaE,EAAIV,GACpBP,EAAGgB,cAAcC,GAEjB,IAAME,EAAUnB,EAAGoB,gBACnBpB,EAAGqB,aAAaF,EAASP,GACzBZ,EAAGqB,aAAaF,EAASF,GACzBjB,EAAGsB,YAAYH,GAEf,IAAMI,EAAUvB,EAAGwB,eACnBxB,EAAGyB,WAAWzB,EAAG0B,aAAcH,GAC/BvB,EAAG2B,WAAW3B,EAAG0B,aAAclC,EAAUQ,EAAG4B,aAE5C5B,EAAG6B,WAAWV,GAETnB,EAAG8B,mBAAmBlB,EAAIZ,EAAG+B,iBAChCC,QAAQC,IAAIjC,EAAGkC,iBAAiBtB,IAE7BZ,EAAG8B,mBAAmBb,EAAIjB,EAAG+B,iBAChCC,QAAQC,IAAIjC,EAAGkC,iBAAiBjB,IAE7BjB,EAAGmC,oBAAoBhB,EAASnB,EAAGoC,cACtCJ,QAAQC,IAAIjC,EAAGqC,kBAAkBlB,IAGnCA,EAAQmB,OAAStC,EAAGuC,mBAAmBpB,EAAS,SAChDnB,EAAGwC,UAAUrB,EAAQmB,OAAQ,GAG7BnB,EAAQsB,gBAAkBzC,EAAG0C,kBAAkBvB,EAAS,mBACxDnB,EAAG2C,wBAAwBxB,EAAQsB,iBACnCzC,EAAG4C,oBAAoBzB,EAAQsB,gBAAiB,EAAGzC,EAAG6C,OAAO,EAAO,EAAG,GAEvE,IAAIC,EAAO,EACLC,EAAO,SAAPA,IACJD,IACA9C,EAAGwC,UAAUrB,EAAQmB,OAAQQ,GAC7B9C,EAAGgD,WAAWhD,EAAGiD,UAAW,EAAG,GAC/BC,WAAWH,EAAM,KAEnBA;;;;ACzEA,aADA,QAAA,WACA,QAAA","file":"main.45cdf1a6.js","sourceRoot":"../src","sourcesContent":["module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform float uTime;\\n\\nvoid main() {\\n  float x = gl_FragCoord.x;\\n  float y = gl_FragCoord.y;\\n  float nx = x / 512.0 + 0.5;\\n  float ny = y / 512.0 + 0.5;\\n\\n  // float time = uTime;\\n  float st = uTime/40.0;\\n\\n//\\n  float c = sin( ((ny*ny-sin(st*0.1))*(nx/ny-0.3*cos(st*0.05))*2.95 +st*0.2)*80.0 );\\n\\n  gl_FragColor = vec4(c*0.5, 0.0 , c*(1.0+sin(st))*0.2, 1.0);\\n}\\n\";","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform float uTime;\\n\\nvoid main() {\\n  float x = gl_FragCoord.x;\\n  float y = gl_FragCoord.y;\\n  float time = uTime;\\n  float tek = mod((y/2.0+sin((x)/6.0)) + cos(y/20.0)*3.0 + cos(x/20.0 + time/20.0)*1.4 - time/2.0, 35.0) / 15.0;\\n  gl_FragColor = vec4(tek*0.4, 0.1, 2.0 - tek*0.5, 1.0);\\n}\\n\";","import redWaves from \"./redWaves.glsl\";\nimport waves from \"./waves.glsl\";\n\nconst shaders = [redWaves, waves];\n\nconst vertices = new Float32Array([-1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1]);\n\nconst scene = {\n  width: 512,\n  height: 512\n};\n\nconst canvas = document.getElementById(\"canvas\");\nconst gl = canvas.getContext(\"webgl\");\ncanvas.width = scene.width;\ncanvas.height = scene.height;\n\ngl.viewport(0, 0, canvas.width, canvas.height);\ngl.clearColor(0, 0, 0, 1);\ngl.clear(gl.COLOR_BUFFER_BIT);\n\nconst vertex = `\nattribute vec2 aVertexPosition;\n\nvoid main() {\ngl_Position = vec4(aVertexPosition, 0.0, 1.0);\n}\n`;\nconst fragment = shaders[Math.floor(Math.random() * shaders.length)];\n\nconst vs = gl.createShader(gl.VERTEX_SHADER);\ngl.shaderSource(vs, vertex);\ngl.compileShader(vs);\n\nconst fs = gl.createShader(gl.FRAGMENT_SHADER);\ngl.shaderSource(fs, fragment);\ngl.compileShader(fs);\n\nconst program = gl.createProgram();\ngl.attachShader(program, vs);\ngl.attachShader(program, fs);\ngl.linkProgram(program);\n\nconst vbuffer = gl.createBuffer();\ngl.bindBuffer(gl.ARRAY_BUFFER, vbuffer);\ngl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n\ngl.useProgram(program);\n\nif (!gl.getShaderParameter(vs, gl.COMPILE_STATUS))\n  console.log(gl.getShaderInfoLog(vs));\n\nif (!gl.getShaderParameter(fs, gl.COMPILE_STATUS))\n  console.log(gl.getShaderInfoLog(fs));\n\nif (!gl.getProgramParameter(program, gl.LINK_STATUS))\n  console.log(gl.getProgramInfoLog(program));\n\n// piu\nprogram.uColor = gl.getUniformLocation(program, \"uTime\");\ngl.uniform1f(program.uColor, 1.0);\n\n// pow\nprogram.aVertexPosition = gl.getAttribLocation(program, \"aVertexPosition\");\ngl.enableVertexAttribArray(program.aVertexPosition);\ngl.vertexAttribPointer(program.aVertexPosition, 2, gl.FLOAT, false, 0, 0);\n\nlet time = 0;\nconst loop = () => {\n  time++;\n  gl.uniform1f(program.uColor, time);\n  gl.drawArrays(gl.TRIANGLES, 0, 6);\n  setTimeout(loop, 50);\n};\nloop();\n","import \"./webgl\";\nimport \"./style.css\";\n"]}