{"version":3,"sources":["webgl.js","main.js"],"names":["vertices","Float32Array","scene","width","height","canvas","document","getElementById","gl","getContext","viewport","clearColor","clear","COLOR_BUFFER_BIT","vertex","fragment","vs","createShader","VERTEX_SHADER","shaderSource","compileShader","fs","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","vbuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","useProgram","getShaderParameter","COMPILE_STATUS","console","log","getShaderInfoLog","getProgramParameter","LINK_STATUS","getProgramInfoLog","uColor","getUniformLocation","uniform1f","aVertexPosition","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","FLOAT","time","loop","drawArrays","TRIANGLES","setTimeout"],"mappings":";AAAA,IAAMA,EAAW,IAAIC,aAAa,EAAE,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,IAEpEC,EAAQ,CACZC,MAAO,IACPC,OAAQ,KAGJC,EAASC,SAASC,eAAe,UACjCC,EAAKH,EAAOI,WAAW,SAC7BJ,EAAOF,MAAQD,EAAMC,MACrBE,EAAOD,OAASF,EAAME,OAEtBI,EAAGE,SAAS,EAAG,EAAGL,EAAOF,MAAOE,EAAOD,QACvCI,EAAGG,WAAW,EAAG,EAAG,EAAG,GACvBH,EAAGI,MAAMJ,EAAGK,kBAEZ,IAAMC,EAAN,0GAOMC,EAAN,wUAeMC,EAAKR,EAAGS,aAAaT,EAAGU,eAC9BV,EAAGW,aAAaH,EAAIF,GACpBN,EAAGY,cAAcJ,GAEjB,IAAMK,EAAKb,EAAGS,aAAaT,EAAGc,iBAC9Bd,EAAGW,aAAaE,EAAIN,GACpBP,EAAGY,cAAcC,GAEjB,IAAME,EAAUf,EAAGgB,gBACnBhB,EAAGiB,aAAaF,EAASP,GACzBR,EAAGiB,aAAaF,EAASF,GACzBb,EAAGkB,YAAYH,GAEf,IAAMI,EAAUnB,EAAGoB,eACnBpB,EAAGqB,WAAWrB,EAAGsB,aAAcH,GAC/BnB,EAAGuB,WAAWvB,EAAGsB,aAAc9B,EAAUQ,EAAGwB,aAE5CxB,EAAGyB,WAAWV,GAETf,EAAG0B,mBAAmBlB,EAAIR,EAAG2B,iBAChCC,QAAQC,IAAI7B,EAAG8B,iBAAiBtB,IAE7BR,EAAG0B,mBAAmBb,EAAIb,EAAG2B,iBAChCC,QAAQC,IAAI7B,EAAG8B,iBAAiBjB,IAE7Bb,EAAG+B,oBAAoBhB,EAASf,EAAGgC,cACtCJ,QAAQC,IAAI7B,EAAGiC,kBAAkBlB,IAGnCA,EAAQmB,OAASlC,EAAGmC,mBAAmBpB,EAAS,SAChDf,EAAGoC,UAAUrB,EAAQmB,OAAQ,GAG7BnB,EAAQsB,gBAAkBrC,EAAGsC,kBAAkBvB,EAAS,mBACxDf,EAAGuC,wBAAwBxB,EAAQsB,iBACnCrC,EAAGwC,oBAAoBzB,EAAQsB,gBAAiB,EAAGrC,EAAGyC,OAAO,EAAO,EAAG,GAEvE,IAAIC,EAAO,EACLC,EAAO,SAAPA,IACJD,IACA1C,EAAGoC,UAAUrB,EAAQmB,OAAQQ,GAC7B1C,EAAG4C,WAAW5C,EAAG6C,UAAW,EAAG,GAC/BC,WAAWH,EAAM,KAEnBA;;;;ACjFA,aADA,QAAA,WACA,QAAA","file":"main.9199b8aa.js","sourceRoot":"../src","sourcesContent":["const vertices = new Float32Array([-1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1]);\n\nconst scene = {\n  width: 512,\n  height: 512\n};\n\nconst canvas = document.getElementById(\"canvas\");\nconst gl = canvas.getContext(\"webgl\");\ncanvas.width = scene.width;\ncanvas.height = scene.height;\n\ngl.viewport(0, 0, canvas.width, canvas.height);\ngl.clearColor(0, 0, 0, 1);\ngl.clear(gl.COLOR_BUFFER_BIT);\n\nconst vertex = `\nattribute vec2 aVertexPosition;\n\nvoid main() {\ngl_Position = vec4(aVertexPosition, 0.0, 1.0);\n}\n`;\nconst fragment = `\n\nprecision highp float;\n\nuniform float uTime;\n\nvoid main() {\n  float x = gl_FragCoord.x;\n  float y = gl_FragCoord.y;\n  float time = uTime;\n  float tek = mod((y/2.0+sin((x)/6.0)) + cos(y/20.0)*3.0 + cos(x/20.0 + time/20.0)*1.4 - time/2.0, 35.0) / 15.0;\n  gl_FragColor = vec4(tek*0.4, 0.1, 2.0 - tek*0.5, 1.0);\n}\n`;\n\nconst vs = gl.createShader(gl.VERTEX_SHADER);\ngl.shaderSource(vs, vertex);\ngl.compileShader(vs);\n\nconst fs = gl.createShader(gl.FRAGMENT_SHADER);\ngl.shaderSource(fs, fragment);\ngl.compileShader(fs);\n\nconst program = gl.createProgram();\ngl.attachShader(program, vs);\ngl.attachShader(program, fs);\ngl.linkProgram(program);\n\nconst vbuffer = gl.createBuffer();\ngl.bindBuffer(gl.ARRAY_BUFFER, vbuffer);\ngl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n\ngl.useProgram(program);\n\nif (!gl.getShaderParameter(vs, gl.COMPILE_STATUS))\n  console.log(gl.getShaderInfoLog(vs));\n\nif (!gl.getShaderParameter(fs, gl.COMPILE_STATUS))\n  console.log(gl.getShaderInfoLog(fs));\n\nif (!gl.getProgramParameter(program, gl.LINK_STATUS))\n  console.log(gl.getProgramInfoLog(program));\n\n// piu\nprogram.uColor = gl.getUniformLocation(program, \"uTime\");\ngl.uniform1f(program.uColor, 1.0);\n\n// pow\nprogram.aVertexPosition = gl.getAttribLocation(program, \"aVertexPosition\");\ngl.enableVertexAttribArray(program.aVertexPosition);\ngl.vertexAttribPointer(program.aVertexPosition, 2, gl.FLOAT, false, 0, 0);\n\nlet time = 0;\nconst loop = () => {\n  time++;\n  gl.uniform1f(program.uColor, time);\n  gl.drawArrays(gl.TRIANGLES, 0, 6);\n  setTimeout(loop, 50);\n};\nloop();\n","import \"./webgl\";\nimport \"./style.css\";\n"]}